
**************************************************************************************************
		Demonstration Docker 1 : Conteneurisation des services avec le cloud 
                                         OpenShift Online 3 PaaS de Redhat

**************************************************************************************************
https://www.openshift.com/pricing/index.html#faq_new-users

**************************************************************************************************
		Demonstration Docker 2:  Portainer Dashboard
**************************************************************************************************
http://demo.portainer.io/#/dashboard 



**************************************************************************************************
		Atelier 6 : Installation Docker, Gestion des conteneurs et Fabrication des images
**************************************************************************************************

1-Set up the repository (Docker CE)
1.1-Install packages to allow apt to use a repository over HTTPS:
    $ sudo apt-get update 
    $ sudo apt-get install apt-transport-https ca-certificates curl software-properties-common
1.2-Add Docker’s official GPG key:

$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

1.3 set up the stable repository (amd64):
$ sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"

2-Install Docker

    $ sudo apt-get update
    $ sudo apt-get install docker-ce
Or from a specfic version (On production systems):
  $ apt-cache madison docker-ce
  $ sudo apt-get install docker-ce=<VERSION>
-Configure Docker to start on boot:
$ sudo systemctl enable docker

3-Uninstall Docker

    4.1-Uninstall the Docker package:
     $ sudo apt-get purge docker-ce
    4.2-delete all images, containers, and volumes:
     $ sudo rm -rf /var/lib/docker

4-Executing the Docker Command Without Sudo (Optional):
$ sudo usermod -aG docker $(whoami)

5-Using the Docker Command

 $ docker --help
 $ docker info
 $ docker "subcommand" --help

6-Verify that Docker CE  is installed correctly by running the hello-world image.

$ sudo docker run hello-world

7-Working with Docker Images

-Search for images available on Docker Hub:
 $ sudo docker search ubuntu
-download ubuntu image to your computer
 $ sudo docker pull ubuntu
 $ sudo docker run -it --name docker1 ubuntu
8-Build your own image
-Write a Dockerfile:
$ echo \
"FROM ubuntu:16.04 
RUN apt-get update && apt-get install -y openssh-server git apache2 python vim
RUN mkdir /var/run/sshd
RUN echo 'root:root' | chpasswd
RUN sed -i 's/PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config
EXPOSE 22 80">>Dockerfile
-Build image
$ sudo docker build -t myimage .
$ sudo docker images
-Create One continer:
$ sudo docker run -it --name docker1 myimage
$ exit
$ sudo docker ps
$ sudo docker start docker1
$ sudo docker attach docker1
$ exit
$ sudo docker stop docker1
$ sudo docker rm docker1

-Create 2 containers:

$ sudo docker run -dt -p 80:80 --name docker1 myimage
$ sudo docker run -dt -p 81:80 --name docker2 myimage
$ sudo docker ps
$ sudo docker info

-Access with SSH:

$ sudo  docker exec -d docker1 /etc/init.d/ssh start
$ sudo  docker inspect docker1
$ ssh root@172.17.0.2/3
-->try SSH between containers.

-Start Apache2 Server:

$ docker exec -d docker1 /etc/init.d/apache2 start
$ docker exec -d docker2 /etc/init.d/apache2 start

-->on VM browser try : http://localhost:80, http://localhost:81
$ docker exec -d docker1 mkdir /var/www/html/test
-->try again http://localhost/test/ 

$ docker stop docker1 docker2
$ docker rm docker1 docker2

9-Running web application:
-Create Mysql
$ sudo docker run --name my_mysql -e MYSQL_ROOT_PASSWORD=root -d mysql:5.7
66c0529d97fb3a458c7621cb60ec67472b74b906b2d624fe999fa1d0ceabc0d8
-create PHPMyadmin
$ sudo docker run --name my_admin -d --link my_mysql:db -p 8080:80 phpmyadmin/phpmyadmin
ff548373c12c7c8867e4a6f2f25e6d27773847e1dac38654ad3504f21d7a3f4c

-Change Dockerfile to deploy web application
-from local machine to VM (option)
$ scp -r -P 2228 Documents/Tutos-VM/docker-demo/MyApp/ cloud@localhost:
$ echo \
"FROM ubuntu:16.04 
RUN apt-get update && apt-get install -y openssh-server apache2 git vim
RUN mkdir /var/run/sshd
RUN echo 'root:root' | chpasswd
RUN sed -i 's/PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config
RUN git clone https://github.com/walidsaad/MyApp-v2.git /var/www/html/MyApp
#ADD MyApp /var/www/html/MyApp
WORKDIR /var/www/html/MyApp
RUN service apache2 restart
EXPOSE 22 80" >>Dockerfile

-Build image

$ sudo docker build -t myimage .

-Start container:

$ sudo docker run -dt -p 80:80 --name docker1 myimage
$ sudo docker exec -d docker1 /etc/init.d/apache2 start
-->http://localhost/MyApp/ (with chrome)

**************************************************************************************************
		Atelier 7 : Multi-containers with docker-compose
**************************************************************************************************

Install Compose on Linux systems
$ sudo curl -L https://github.com/docker/compose/releases/download/1.21.0/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
$ sudo chmod +x /usr/local/bin/docker-compose
$ docker-compose --version
$ mkdir lasalle_wordpress
$ cd my_wordpress
$ echo \
"version: '3.3'

services:
   db:
     image: mysql:5.7
     volumes:
       - dbdata:/var/lib/mysql
     restart: always
     environment:
       MYSQL_ROOT_PASSWORD: somewordpress
       MYSQL_DATABASE: wordpress
       MYSQL_USER: wordpress
       MYSQL_PASSWORD: wordpress

   wordpress:
     depends_on:
       - db
     image: wordpress:latest
     ports:
       - "8000:80"
     restart: always
     environment:
       WORDPRESS_DB_HOST: db:3306
       WORDPRESS_DB_USER: wordpress
       WORDPRESS_DB_PASSWORD: wordpress
volumes:
    dbdata:" >>docker-compose.yml
$ sudo docker-compose up -d

$ sudo docker-compose up -d
Creating network "my_wordpress_default" with the default driver
Creating volume "my_wordpress_dbdata" with default driver
Pulling db (mysql:5.7)...
5.7: Pulling from library/mysql
2a72cbf407d6: Pull complete
38680a9b47a8: Pull complete
4c732aa0eb1b: Pull complete
c5317a34eddd: Pull complete
f92be680366c: Pull complete
e8ecd8bec5ab: Pull complete
2a650284a6a8: Pull complete
5b5108d08c6d: Pull complete
beaff1261757: Pull complete
c1a55c6375b5: Pull complete
8181cde51c65: Pull complete
Digest: sha256:691c55aabb3c4e3b89b953dd2f022f7ea845e5443954767d321d5f5fa394e28c
Status: Downloaded newer image for mysql:5.7
Pulling wordpress (wordpress:latest)...
latest: Pulling from library/wordpress
2a72cbf407d6: Already exists
273cd543cb15: Pull complete
ec5ac8875de7: Pull complete
9106e19b56c1: Pull complete
ee2f70ac7c7d: Pull complete
7257ad6985e8: Pull complete
18f5c2055da2: Pull complete
85293a6fdd80: Pull complete
9e797eeb0c14: Pull complete
f16178842884: Pull complete
13899c06d3f8: Pull complete
70c27fe4c3c5: Pull complete
d32c8ad2d9d7: Pull complete
07fe445494e6: Pull complete
63b8de7b32fe: Pull complete
e4b721952e22: Pull complete
d9ede6dd6f74: Pull complete
0af4f74bfd92: Pull complete
e4e7c47b969f: Pull complete
69aff47f3112: Pull complete
Digest: sha256:201d004f55669dd2c0884f00fc44145fb0da8cafa465bf22cbaacecaf81138d4
Status: Downloaded newer image for wordpress:latest
Creating my_wordpress_db_1 ... done
Creating my_wordpress_wordpress_1 ... done

cloud@cloud-lab:~/my_wordpress$ sudo docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMES
f851813b3beb        wordpress:latest    "docker-entrypoint.s…"   2 minutes ago       Up About a minute   0.0.0.0:8000->80/tcp   my_wordpress_wordpress_1
34f2110999eb        mysql:5.7           "docker-entrypoint.s…"   2 minutes ago       Up 2 minutes        3306/tcp               my_wordpress_db_1
$ sudo docker-compose stop


**************************************************************************************************
		Démonstration 3 : Création d’une Container-based Infrastructure avec Docker Machine
               (Exemples de déploiement en local, sur un Cloud Privé Openstack et sur un Cloud Public Amazon AWS).
**************************************************************************************************
