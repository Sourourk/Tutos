
1-Set up the repository (Docker CE)
1.1-Install packages to allow apt to use a repository over HTTPS:

    $ sudo apt-get install apt-transport-https ca-certificates curl software-properties-common
1.2-Add Dockerâ€™s official GPG key:

$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

1.3 set up the stable repository (amd64):
$ sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"

2-Install Docker

    $ sudo apt-get update
    $ sudo apt-get install docker-ce
Or from a specfic version (On production systems):
  $ apt-cache madison docker-ce
  $ sudo apt-get install docker-ce=<VERSION>
-Configure Docker to start on boot:
$ sudo systemctl enable docker

3-Uninstall Docker

    4.1-Uninstall the Docker package:
     $ sudo apt-get purge docker-ce
    4.2-delete all images, containers, and volumes:
     $ sudo rm -rf /var/lib/docker

4-Executing the Docker Command Without Sudo (Optional):
$ sudo usermod -aG docker $(whoami)

5-Using the Docker Command

 $ docker --help
 $ docker info
 $ docker "subcommand" --help

6-Verify that Docker CE  is installed correctly by running the hello-world image.

$ sudo docker run hello-world

7-Working with Docker Images

-Search for images available on Docker Hub:
 $ docker search ubuntu
-download ubuntu image to your computer
 $ docker pull ubuntu

8-Build your own image
-Write a Dockerfile:
$ echo
"FROM ubuntu:16.04
RUN apt-get update && apt-get install -y openssh-server git apache2 python vim
RUN mkdir /var/run/sshd
RUN echo 'root:root' | chpasswd
RUN sed -i 's/PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config
EXPOSE 22 80>>Dockerfile
-Build image
$ sudo docker build -t myimage .
$ docker images
-Create One continer:
$ docker run -it --name docker1 myimage
$ exit
$ docker ps
$ docker start docker1
$ docker attach docker1
$ exit
$ docker stop docker1
$ docker rm docker1

-Create 3 container:

$ docker run -dt -p 80:80 --name docker1 myimage
$ docker run -dt -p 81:80 --name docker2 myimage
$ docker run -dt -p 82:80 --name docker3 myimage
$ docker ps
$ docker info

-Access with SSH:

$ docker exec -d docker1 /etc/init.d/ssh start
$ docker inspect docker1
$ ssh root@172.17.0.2/3/4
-->try SSH between containers.

-Start Apache2 Server:

$ docker exec -d docker1 /etc/init.d/apache2 start
$ docker exec -d docker2 /etc/init.d/apache2 start
$ docker exec -d docker3 /etc/init.d/apache2 start
-->on VM browser try : http://localhost:80, http://localhost:81, http://localhost:82
$ docker exec -d docker1 mkdir /var/www/html/test
-->try again http://localhost/test/ 

$ docker stop docker1 docker2 docker3
$ docker rm docker1 docker2 docker3

9-Running web application (openshift PaaS):

-Change Dockerfile to deploy web application
-from local machine to VM (option)
$ scp -r -P 2228 Documents/Tutos-VM/docker-demo/MyApp/ cloud@localhost:
$ echo
"FROM ubuntu:16.04
RUN apt-get update && apt-get install -y openssh-server git apache2 python vim
RUN mkdir /var/run/sshd
RUN echo 'root:root' | chpasswd
RUN sed -i 's/PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config
#git clone https://github.com/walidsaad/wendelin-vagrant-grid5000 /var/www/html/MyApp
ADD MyApp /var/www/html/MyApp
WORKDIR /var/www/html/MyApp
EXPOSE 22 80 >>Dockerfile

-Build image

$ sudo docker build -t myimage .

-Start container:

$ docker run -dt -p 80:80 --name docker1 myimage
$ docker exec -d docker1 /etc/init.d/apache2 start
-->http://localhost/MyApp/ (with chrome)

10-Docker Hub
11-Docker Compose (multi-container inside the same host)
12-Docker Swarm  (multi-container/cluster over multiple host/server)
13- Google kubernates
